# GraphQL schema for course creator
scalar Upload

# define course type
type Course{
    id: ID
    name: String!
    description: String!
    instructor: String
    image: String
    previewVideo: String
    tileImage: String
    owner: String
    duration: Int
    level: String
    language: [String]
    takeaways: [String]
    created_at: String
    updated_at: String
    type: String
    prequisites: [String]
    goodFor: [String]
    mustFor: [String]
    created_by: String
    updated_by: String
    status: Status!
}

enum Status {
    SAVED
    APPROVAL_PENDING
    ON_HOLD
    APPROVED
    PUBLSIHED
    REJECTED
}

input CourseInput{
    id: ID    
    name: String!
    description: String!
    instructor: String
    image: String
    previewVideo: String
    tileImage: String
    owner: String
    duration: Int
    level: String
    language: [String]
    takeaways: [String]
    type: String
    prequisites: [String]
    goodFor: [String]
    mustFor: [String]
    created_by: String
    updated_by: String
    status: Status!
}

input CourseFile{
    file: Upload!
    courseId: String!
}
input ModuleInput{
    id: ID
    name: String!
    isChapter: Boolean!
    description: String!
    courseId: String!
    owner: String
    duration: Int
    level : String
    sequence: Int
    setGlobal: Boolean
}

type Module{
    id: ID
    name: String!
    isChapter: Boolean!
    description: String!
    courseId: String!
    owner: String
    duration: Int
    created_at: String
    updated_at: String
    level : String
    sequence: Int
    setGlobal: Boolean
}

input ChapterInput {
    id: ID
    name: String!
    description: String!
    moduleId: String
    courseId: String!
    sequence: Int
}

type Chapter {
    id: ID
    name: String!
    description: String!
    moduleId: String
    courseId: String!
    created_at: String
    updated_at: String
    sequence: Int
}

input TopicInput {
    id: ID
    name: String!
    description: String!
    type : String!
    moduleId: String
    chapterId: String
    courseId: String!
    sequence: Int
    created_by: String
    updated_by: String
}

type Topic {
    id: ID
    name: String!
    description: String!
    type : String!
    moduleId: String
    chapterId: String
    courseId: String!
    created_at: String
    updated_at: String
    sequence: Int
    created_by: String
    updated_by: String
}

input TopicContentInput {
    language: String!
    topicId: String!
    startTime: Int
    duration: Int
    skipIntro: Boolean
    nextShowTime: Int
    fromEndTime: Int
}

type TopicContent {
    language: String!
    topicId: String!
    startTime: Int
    duration: Int
    skipIntro: Boolean
    nextShowTime: Int
    fromEndTime: Int
    created_at: String
    updated_at: String
}

input TopicVideo{
    file: Upload!
    courseId: String!
    topicId: String!
}

input StaticContent{
    type: Type!
    file: Upload!
    courseId: String!
    topicId: String!
}
# enum Type 
enum Type {
    SCROM
    TINCAN
    CMI5
    HTML5
}

type Quiz {
    id: ID
    name: String!
    category: String!
    type: String!
    isMandatory: Boolean!
    created_at: String
    updated_at: String
    topicId: String!
    sequence: Int
    startTime: Int
}
input QuizInput {
    id: ID
    name: String!
    category: String!
    type: String!
    isMandatory: Boolean!
    created_at: String
    updated_at: String
    topicId: String!
    sequence: Int
    startTime: Int
}
input QuizFile {
    quizId: String!
    type: String!
    name: String!
    file: Upload!
}
input QuizMcq {
    quizId: String!
    question: String!
    options: [String]!
    correctOption: String!
    explanation: String!
}
input QuizDescriptive {
    quizId: String!
    question: String!
    correctAnswer: String!
    explanation: String!
}

input TopicResourceInput {
    type: String!
    topicId: String!
    created_at: String
    updated_at: String
    created_by: String
    updated_by: String
    url: String!
    file: Upload!
}
# define type mutations to add a course  using courseInput
type Mutation{
    addCourse(course: CourseInput): Course
    updateCourse(course: CourseInput): Course
    uploadCourseImage(file: CourseFile!): Boolean
    uploadCoursePreviewVideo(file: CourseFile!): Boolean
    uploadCourseTileImage(file: CourseFile!): Boolean
    addCourseModule(courseId: String!, module: ModuleInput): Module
    updateCourseModule(module: ModuleInput): Module
    addCourseChapter(courseId: String!, chapter: ChapterInput): Chapter
    updateCourseChapter(chapter: ChapterInput): Chapter
    addCourseTopic(courseId: String!, topic: TopicInput): Topic
    updateCourseTopic(topic: TopicInput): Topic
    addTopicContent(topicId: String!, topicConent: TopicContentInput): TopicContent
    updateTopicContent(topicContent: TopicContentInput): TopicContent
    uploadTopicContentVideo(file: TopicVideo!): Boolean
    uploadTopicStaticContent(file: StaticContent!): Boolean
    addQuiz(quiz: QuizInput): Quiz
    updateQuiz(quiz: QuizInput): Quiz
    uploadQuizFile(couseId:String!, file: QuizFile!): Boolean
    addQuizMCQ(quiz: QuizMcq): Boolean
    addQuizDescriptive(quiz: QuizDescriptive): Boolean
    uploadTopicResource(resource:TopicResourceInput): Boolean
}
