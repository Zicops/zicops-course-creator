# GraphQL schema for course creator
scalar Upload

type sub_categories {
  name: String
  rank: Int
}
input sub_categories_input {
  name: String
  rank: Int
}
# define course type
type Course {
  id: ID
  name: String
  lspId: String
  publisher: String
  description: String
  summary: String
  instructor: String
  image: String
  previewVideo: String
  tileImage: String
  owner: String
  duration: Int
  expertise_level: String
  language: [String]
  benefits: [String]
  outcomes: [String]
  created_at: String
  updated_at: String
  type: String
  prequisites: [String]
  goodFor: [String]
  mustFor: [String]
  related_skills: [String]
  publish_date: String
  expiry_date: String
  expected_completion: String
  qa_required: Boolean
  approvers: [String]
  created_by: String
  updated_by: String
  status: Status
  is_display: Boolean
  category: String
  sub_category: String
  sub_categories: [sub_categories]
  is_active: Boolean
}

enum Status {
  SAVED
  APPROVAL_PENDING
  ON_HOLD
  APPROVED
  PUBLISHED
  REJECTED
}

input CourseInput {
  id: ID
  name: String
  lspId: String
  publisher: String
  description: String
  summary: String
  instructor: String
  image: String
  previewVideo: String
  tileImage: String
  owner: String
  duration: Int
  expertise_level: String
  language: [String]
  benefits: [String]
  outcomes: [String]
  type: String
  prequisites: [String]
  goodFor: [String]
  mustFor: [String]
  related_skills: [String]
  publish_date: String
  expiry_date: String
  expected_completion: String
  qa_required: Boolean
  approvers: [String]
  created_by: String
  updated_by: String
  status: Status
  is_display: Boolean
  category: String
  sub_category: String
  sub_categories: [sub_categories_input]
  is_active: Boolean
}

input CourseFile {
  file: Upload
  courseId: String
}
input ModuleInput {
  id: ID
  name: String
  isChapter: Boolean
  description: String
  courseId: String
  owner: String
  duration: Int
  level: String
  sequence: Int
  setGlobal: Boolean
}

type Module {
  id: ID
  name: String
  isChapter: Boolean
  description: String
  courseId: String
  owner: String
  duration: Int
  created_at: String
  updated_at: String
  level: String
  sequence: Int
  setGlobal: Boolean
}

input ChapterInput {
  id: ID
  name: String
  description: String
  moduleId: String
  courseId: String
  sequence: Int
}

type Chapter {
  id: ID
  name: String
  description: String
  moduleId: String
  courseId: String
  created_at: String
  updated_at: String
  sequence: Int
}

input TopicInput {
  id: ID
  name: String
  description: String
  type: String
  moduleId: String
  chapterId: String
  courseId: String
  sequence: Int
  created_by: String
  updated_by: String
}

type Topic {
  id: ID
  name: String
  description: String
  type: String
  moduleId: String
  chapterId: String
  courseId: String
  created_at: String
  updated_at: String
  sequence: Int
  created_by: String
  updated_by: String
}

input TopicContentInput {
  language: String
  contentId: String
  startTime: Int
  duration: Int
  skipIntroDuration: Int
  nextShowTime: Int
  fromEndTime: Int
  type: String
  is_default: Boolean
}

type TopicContent {
  id: ID
  language: String
  topicId: String
  courseId: String
  startTime: Int
  duration: Int
  skipIntroDuration: Int
  nextShowTime: Int
  fromEndTime: Int
  created_at: String
  updated_at: String
  type: String
  is_default: Boolean
}

type TopicExam {
  id: ID
  topicId: String
  examId: String
  courseId: String
  created_at: String
  updated_at: String
  language: String
}

input TopicExamInput {
  id: ID
  topicId: String
  examId: String
  created_at: String
  updated_at: String
  language: String
}

input TopicVideo {
  file: Upload
  courseId: String
  contentId: String
}

input TopicSubtitle {
  file: Upload
  courseId: String
  topicId: String
  language: String
}

input StaticContent {
  type: Type
  file: Upload
  courseId: String
  contentId: String
  url: String
}

# enum Type
enum Type {
  SCORM
  TINCAN
  CMI5
  HTML5
}

type Quiz {
  id: ID
  name: String
  category: String
  type: String
  isMandatory: Boolean
  created_at: String
  updated_at: String
  topicId: String
  courseId: String
  questionId: String
  qbId: String
  weightage: Int
  sequence: Int
  startTime: Int
}
input QuizInput {
  id: ID
  name: String
  category: String
  type: String
  isMandatory: Boolean
  created_at: String
  updated_at: String
  topicId: String
  courseId: String
  questionId: String
  qbId: String
  weightage: Int
  sequence: Int
  startTime: Int
}
input QuizFile {
  quizId: String
  type: String
  name: String
  file: Upload
}
input QuizMcq {
  quizId: String
  question: String
  options: [String]
  correctOption: String
  explanation: String
}
input QuizDescriptive {
  quizId: String
  question: String
  correctAnswer: String
  explanation: String
}

input TopicResourceInput {
  name: String
  type: String
  topicId: String
  created_at: String
  updated_at: String
  created_by: String
  updated_by: String
  url: String
  file: Upload
}

type UploadResult {
  success: Boolean
  url: String
}

type UploadResultSubtitles {
  success: Boolean
  url: String
  language: String
}

input QuestionBankInput {
  id: ID
  name: String
  description: String
  category: String
  sub_category: String
  created_at: String
  updated_at: String
  created_by: String
  updated_by: String
  is_active: Boolean
  is_default: Boolean
  owner: String
}

type QuestionBank {
  id: ID
  name: String
  description: String
  category: String
  sub_category: String
  created_at: String
  updated_at: String
  created_by: String
  updated_by: String
  is_active: Boolean
  is_default: Boolean
  owner: String
}

type QuestionBankQuestion {
  id: ID
  Name: String
  Description: String
  Type: String
  Difficulty: Int
  Attachment: String
  AttachmentType: String
  Hint: String
  QbmId: String
  Status: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
}

input QuestionBankQuestionInput {
  id: ID
  Name: String
  Description: String
  Type: String
  Difficulty: Int
  File: Upload
  AttachmentType: String
  Hint: String
  QbmId: String
  Status: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
}

type QuestionOption {
  id: ID
  QmId: String
  Description: String
  IsCorrect: Boolean
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  AttachmentType: String
  Attachment: String
  IsActive: Boolean
}

input QuestionOptionInput {
  id: ID
  QmId: String
  Description: String
  IsCorrect: Boolean
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  AttachmentType: String
  File: Upload
  IsActive: Boolean
}

type QuestionPaper {
  id: ID
  name: String
  Category: String
  SubCategory: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  DifficultyLevel: String
  SectionWise: Boolean
  Description: String
  SuggestedDuration: String
  Status: String
}

input QuestionPaperInput {
  id: ID
  name: String
  Category: String
  SubCategory: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  DifficultyLevel: String
  SectionWise: Boolean
  Description: String
  SuggestedDuration: String
  Status: String
}

type QuestionPaperSection {
  id: ID
  QpId: String
  Name: String
  Description: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  Type: String
  DifficultyLevel: String
  TotalQuestions: Int
}

input QuestionPaperSectionInput {
  id: ID
  QpId: String
  Name: String
  Description: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  Type: String
  DifficultyLevel: String
  TotalQuestions: Int
}

input MapSectionToBankInput {
  id: ID
  QbId: String
  SectionId: String
  DifficultyLevel: String
  TotalQuestions: Int
  QuestionMarks: String
  QuestionType: String
  RetrieveType: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

type SectionQBMapping {
  id: ID
  QbId: String
  SectionId: String
  DifficultyLevel: String
  TotalQuestions: Int
  QuestionMarks: String
  QuestionType: String
  RetrieveType: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

input SectionFixedQuestionsInput {
  id: ID
  SqbId: String
  QuestionId: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

type SectionFixedQuestions {
  id: ID
  SqbId: String
  QuestionId: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

input ExamInput {
  id: ID
  Name: String
  Description: String
  Code: String
  QpId: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  Type: String
  ScheduleType: String
  Duration: Int
  Status: String
  Category: String
  SubCategory: String
}

type Exam {
  id: ID
  Name: String
  Description: String
  Code: String
  QpId: String
  QuestionIds: [String]
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  Type: String
  ScheduleType: String
  Duration: Int
  Status: String
  Category: String
  SubCategory: String
  TotalCount: Int
}

input ExamScheduleInput {
  id: ID
  ExamId: String
  Start: Int
  End: Int
  BufferTime: Int
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

type ExamSchedule {
  id: ID
  ExamId: String
  Start: Int
  End: Int
  BufferTime: Int
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

input ExamInstructionInput {
  id: ID
  ExamId: String
  Instructions: String
  PassingCriteria: String
  NoAttempts: Int
  AccessType: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

type ExamInstruction {
  id: ID
  ExamId: String
  Instructions: String
  PassingCriteria: String
  NoAttempts: Int
  AccessType: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

input ExamCohortInput {
  id: ID
  ExamId: String
  CohortId: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

type ExamCohort {
  id: ID
  ExamId: String
  CohortId: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
}

input ExamConfigurationInput {
  id: ID
  ExamId: String
  Shuffle: Boolean
  DisplayHints: Boolean
  ShowAnswer: Boolean
  ShowResult: Boolean
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  CreatedAt: String
  UpdatedAt: String
}

type ExamConfiguration {
  id: ID
  ExamId: String
  Shuffle: Boolean
  DisplayHints: Boolean
  ShowAnswer: Boolean
  ShowResult: Boolean
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  CreatedAt: String
  UpdatedAt: String
}
input CourseCohortInput {
  id: ID
  CourseId: String
  CohortId: String
  CourseType: String
  LspId: String
  CohortCode: String
  isMandatory: Boolean
  CourseStatus: String
  AddedBy: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  ExpectedCompletion: Int
}

type CourseCohort {
  id: ID
  CourseId: String
  CohortId: String
  CourseType: String
  LspId: String
  CohortCode: String
  isMandatory: Boolean
  CourseStatus: String
  AddedBy: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  ExpectedCompletion: Int
}

input CatMainInput {
  id: ID
  Name: String
  Description: String
  ImageUrl: String
  Code: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  ImageFile: Upload
  LspId: String
}

type CatMain {
  id: ID
  Name: String
  Description: String
  ImageUrl: String
  Code: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  LspId: String
}

input SubCatMainInput {
  id: ID
  Name: String
  Description: String
  ImageUrl: String
  Code: String
  CatId: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  ImageFile: Upload
  LspId: String
}

type SubCatMain {
  id: ID
  Name: String
  Description: String
  ImageUrl: String
  Code: String
  CatId: String
  CreatedAt: String
  UpdatedAt: String
  CreatedBy: String
  UpdatedBy: String
  IsActive: Boolean
  LspId: String
}

type ThumbnailsData {
  contentId: String!
  thumbnail: String!
}

input ThumbnailsDataInput {
  contentId: String!
  thumbnail: [String]!
}

input Discussion {
	CourseId: String! 
	ReplyId: String 
	Content: String! 
	Module: String
	Chapter: String 
	Topic: String
	Likes: [String]!
	Dislike: [String]!
	IsAnonymous: Boolean   
	IsPinned: Boolean
	IsAnnouncement: Boolean
	ReplyCount: Int
	CreatedBy: String!
	CreatedAt: Int!
	UpdatedBy: String!
	UpdatedAt: Int! 
	Status: String! 
}


type DiscussionData {
	DiscussionId: String
	CourseId: String 
	ReplyId: String 
	UserId: String 
	Time: Int 
	Content: String 
	Module: String 
	Chapter: String 
	Topic: String 
	Likes: [String]
	Dislike: [String]
	IsAnonymous: Boolean   
	IsPinned: Boolean
	IsAnnouncement: Boolean
	ReplyCount: Int
	CreatedBy: String
	Created_at: Int
	Updated_by: String 
	Updated_at: Int
	Status: String 
}


# define type mutations to add a course  using courseInput
type Mutation {
  addCatMain(input: [CatMainInput]): [CatMain]
  updateCatMain(input: CatMainInput): CatMain
  deleteCatMain(id: ID): Boolean
  addSubCatMain(input: [SubCatMainInput]): [SubCatMain]
  updateSubCatMain(input: SubCatMainInput): SubCatMain
  deleteSubCatMain(id: ID, cat_id: String): Boolean
  addCategories(category: [String]): Boolean
  addSubCategories(sub_category: [String]): Boolean
  addCatSubMapping(category: String, sub_category: [String]): Boolean
  addCourse(course: CourseInput): Course
  deleteCourse(id: ID): Boolean
  updateCourse(course: CourseInput): Course
  uploadCourseImage(file: CourseFile): UploadResult
  uploadCoursePreviewVideo(file: CourseFile): UploadResult
  uploadCourseTileImage(file: CourseFile): UploadResult
  addCourseModule(courseId: String, module: ModuleInput): Module
  deleteCourseModule(id: ID): Boolean
  updateCourseModule(module: ModuleInput): Module
  addCourseChapter(courseId: String, chapter: ChapterInput): Chapter
  deleteCourseChapter(id: ID): Boolean
  updateCourseChapter(chapter: ChapterInput): Chapter
  addCourseTopic(courseId: String, topic: TopicInput): Topic
  deleteCourseTopic(id: ID): Boolean
  updateCourseTopic(topic: TopicInput): Topic
  addTopicContent(
    topicId: String
    courseId: String
    moduleId: String
    topicContent: TopicContentInput
  ): TopicContent
  deleteTopicContent(id: ID): Boolean
  addTopicExam(
    topicId: String
    courseId: String
    exam: TopicExamInput
  ): TopicExam
  deleteTopicExam(id: ID): Boolean
  updateTopicExam(exam: TopicExamInput): TopicExam
  updateTopicContent(
    topicContent: TopicContentInput
    moduleId: String
  ): TopicContent
  uploadTopicContentVideo(file: TopicVideo): UploadResult
  uploadTopicContentSubtitle(file: [TopicSubtitle]): [UploadResultSubtitles]
  uploadTopicStaticContent(file: StaticContent): UploadResult
  addQuiz(quiz: QuizInput): Quiz
  updateQuiz(quiz: QuizInput): Quiz
  deleteQuiz(id: ID): Boolean
  uploadQuizFile(courseId: String, file: QuizFile): UploadResult
  addQuizMCQ(quiz: QuizMcq): Boolean
  addQuizDescriptive(quiz: QuizDescriptive): Boolean
  uploadTopicResource(
    courseId: String
    resource: TopicResourceInput
  ): UploadResult
  deleteTopicResource(id: ID): Boolean
  #################################################################################################
  createQuestionBank(input: QuestionBankInput): QuestionBank
  updateQuestionBank(input: QuestionBankInput): QuestionBank
  deleteQuestionBank(id: ID): Boolean
  bulkAddQuestionBankQuestions(qbId: String!, qfile: Upload!): Boolean!
  addQuestionBankQuestion(
    input: QuestionBankQuestionInput
  ): QuestionBankQuestion
  updateQuestionBankQuestion(
    input: QuestionBankQuestionInput
  ): QuestionBankQuestion
  deleteQuestionBankQuestion(id: ID): Boolean
  addQuestionOptions(input: QuestionOptionInput): QuestionOption
  updateQuestionOptions(input: QuestionOptionInput): QuestionOption
  deleteQuestionOptions(id: ID): Boolean
  addQuestionPaper(input: QuestionPaperInput): QuestionPaper
  updateQuestionPaper(input: QuestionPaperInput): QuestionPaper
  deleteQuestionPaper(id: ID): Boolean
  addQuestionPaperSection(
    input: QuestionPaperSectionInput
  ): QuestionPaperSection
  updateQuestionPaperSection(
    input: QuestionPaperSectionInput
  ): QuestionPaperSection
  deleteQuestionPaperSection(id: ID): Boolean
  mapSectionToBank(input: MapSectionToBankInput): SectionQBMapping
  updateSectionToBank(input: MapSectionToBankInput): SectionQBMapping
  deleteSectionToBank(id: ID): Boolean
  addSectionFixedQuestions(
    input: SectionFixedQuestionsInput
  ): SectionFixedQuestions
  updateSectionFixedQuestions(
    input: SectionFixedQuestionsInput
  ): SectionFixedQuestions
  deleteSectionFixedQuestions(id: ID): Boolean
  addExam(input: ExamInput): Exam
  updateExam(input: ExamInput): Exam
  deleteExam(id: ID): Boolean
  addExamSchedule(input: ExamScheduleInput): ExamSchedule
  updateExamSchedule(input: ExamScheduleInput): ExamSchedule
  deleteExamSchedule(id: ID): Boolean
  addExamInstruction(input: ExamInstructionInput): ExamInstruction
  updateExamInstruction(input: ExamInstructionInput): ExamInstruction
  deleteExamInstruction(id: ID): Boolean
  addExamCohort(input: ExamCohortInput): ExamCohort
  updateExamCohort(input: ExamCohortInput): ExamCohort
  deleteExamCohort(id: ID): Boolean
  addExamConfiguration(input: ExamConfigurationInput): ExamConfiguration
  updateExamConfiguration(input: ExamConfigurationInput): ExamConfiguration
  deleteExamConfiguration(id: ID): Boolean
  addCourseCohort(input: CourseCohortInput): CourseCohort
  updateCourseCohort(input: CourseCohortInput): CourseCohort
  deleteCourseCohort(id: ID): Boolean
  AddContentThumbail(data: ThumbnailsDataInput): String!
  GetThumbnails(contentId:[String]!): [ThumbnailsData]!
  addCourseDiscussion(discussionInput: Discussion!): String!
  updateCourseDiscussion(discussionId: String!, courseId:String!, Content: String, likes: [String], dislikes: [String], isAnonymous: Boolean, IsPinned: Boolean, IsAnnouncement: Boolean, status: String):DiscussionData
}
