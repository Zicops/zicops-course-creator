# GraphQL schema for course creator
scalar Upload

# define course type
type Course{
    id: ID
    name: String!
    description: String!
    instructor: String
    image: String
    previewVideo: String
    owner: String
    duration: Int
    level: String
    language: [String]
    takeaways: [String]
    created_at: String
    updated_at: String
    type: String
    prequisites: [String]
    goodFor: [String]
    mustFor: [String]
    created_by: String
    updated_by: String
    status: String
}

input CourseInput{
    id: ID    
    name: String!
    description: String!
    instructor: String
    image: String
    previewVideo: String
    owner: String
    duration: Int
    level: String
    language: [String]
    takeaways: [String]
    type: String
    prequisites: [String]
    goodFor: [String]
    mustFor: [String]
    created_by: String
    updated_by: String
    status: String
}

input CourseFile{
    file: Upload!
    courseId: String!
}
input ModuleInput{
    id: ID
    name: String!
    isChapter: Boolean!
    description: String!
    courseId: String!
    owner: String
    level : String
    sequence: Int
    setGlobal: Boolean
}

type Module{
    id: ID
    name: String!
    isChapter: Boolean!
    description: String!
    courseId: String!
    owner: String
    created_at: String
    updated_at: String
    level : String
    sequence: Int
    setGlobal: Boolean
}

input ChapterInput {
    id: ID
    name: String!
    description: String!
    moduleId: String
    courseId: String!
    sequence: Int
}

type Chapter {
    id: ID
    name: String!
    description: String!
    moduleId: String
    courseId: String!
    created_at: String
    updated_at: String
    sequence: Int
}

input TopicInput {
    id: ID
    name: String!
    description: String!
    type : String!
    moduleId: String
    chapterId: String
    courseId: String!
    sequence: Int
    created_by: String
    updated_by: String
}

type Topic {
    id: ID
    name: String!
    description: String!
    type : String!
    moduleId: String
    chapterId: String
    courseId: String!
    created_at: String
    updated_at: String
    sequence: Int
    created_by: String
    updated_by: String
}

input TopicContentInput {
    language: String!
    topicId: String!
    startTime: Int
    duration: Int
    skipIntro: Boolean
    nextShowTime: Int
    fromEndTime: Int
}

type TopicContent {
    language: String!
    topicId: String!
    startTime: Int
    duration: Int
    skipIntro: Boolean
    nextShowTime: Int
    fromEndTime: Int
    created_at: String
    updated_at: String
}

input TopicVideo{
    file: Upload!
    courseId: String!
    topicId: String!
}

# define type mutations to add a course  using courseInput
type Mutation{
    addCourse(course: CourseInput): Course
    uploadCourseImage(file: CourseFile!): Boolean
    uploadCoursePreviewVideo(file: CourseFile!): Boolean
    addCourseModule(courseId: String!, module: ModuleInput): Module
    addCourseChapter(courseId: String!, chapter: ChapterInput): Chapter
    addCourseTopic(courseId: String!, topic: TopicInput): Topic
    addTopicContent(topicId: String!, topicConent: TopicContentInput): TopicContent
    uploadTopicContentVideo(file: TopicVideo!): Boolean
}
